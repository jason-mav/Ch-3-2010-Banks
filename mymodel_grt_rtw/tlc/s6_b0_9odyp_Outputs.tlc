%implements s6_b0_9odyp_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T rtb_A[16];
real_T rtb_P[16];
int32_T i;
real_T tmp;
real_T tmp_0;
real_T tmp_1;
real_T rtb_A_tmp;
real_T I_tmp;
%closefile localVarDecl
%assign tlcOutputsFcnOfS6B27 = OpaqueTLCBlockFcn("Outputs", 6, 27, 0, 42)
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
    /* MATLAB Function: '<Root>/MATLAB Function5' incorporates:
 *  Constant: '<Root>/b2'
 *  Constant: '<Root>/d1'
 *  Constant: '<Root>/s'
 */
    /* MATLAB Function 'MATLAB Function5': '<S5>:1' */
    /* '<S5>:1:3' */
    /* '<S5>:1:5' */
    /* '<S5>:1:7' */
    /* '<S5>:1:10' */
    mymodel_B.x_0[0] = 1.0 - 1.0 / mymodel_P.b2_Value;
    mymodel_B.x_0[1] = 0.2;
    mymodel_B.x_0[2] = 0.15 - mymodel_P.s_Value / mymodel_P.d1_Value;
    mymodel_B.x_0[3] = 0.0;
}
/* Integrator: '<Root>/Integrator1' */
if (mymodel_DW.Integrator1_IWORK != 0) {
    mymodel_X.Integrator1_CSTATE[0] = mymodel_B.x_0[0];
    mymodel_X.Integrator1_CSTATE[1] = mymodel_B.x_0[1];
    mymodel_X.Integrator1_CSTATE[2] = mymodel_B.x_0[2];
    mymodel_X.Integrator1_CSTATE[3] = mymodel_B.x_0[3];
}
/* MATLAB Function: '<Root>/MATLAB Function6' incorporates:
 *  Constant: '<Root>/b1'
 *  Constant: '<Root>/d1'
 *  Constant: '<Root>/s'
 *  Integrator: '<Root>/Integrator1'
 *  MATLAB Function: '<Root>/MATLAB Function3'
 */
/* MATLAB Function 'MATLAB Function6': '<S6>:1' */
/* '<S6>:1:8' */
mymodel_B.N = 1.0 / mymodel_P.b1_Value + mymodel_X.Integrator1_CSTATE[0];
/* '<S6>:1:9' */
mymodel_B.T = mymodel_X.Integrator1_CSTATE[1];
/* '<S6>:1:10' */
I_tmp = mymodel_P.s_Value / mymodel_P.d1_Value + mymodel_X.Integrator1_CSTATE[2];
mymodel_B.I = I_tmp;
/* '<S6>:1:11' */
mymodel_B.M = mymodel_X.Integrator1_CSTATE[3];
/* MATLAB Function: '<Root>/MATLAB Function3' incorporates:
 *  Constant: '<Root>/a1'
 *  Constant: '<Root>/a2'
 *  Constant: '<Root>/a3'
 *  Constant: '<Root>/alpha'
 *  Constant: '<Root>/b1'
 *  Constant: '<Root>/b2'
 *  Constant: '<Root>/c1'
 *  Constant: '<Root>/c2'
 *  Constant: '<Root>/c3'
 *  Constant: '<Root>/c4'
 *  Constant: '<Root>/d1'
 *  Constant: '<Root>/d2'
 *  Constant: '<Root>/r1'
 *  Constant: '<Root>/r2'
 *  Constant: '<Root>/ro'
 *  Constant: '<Root>/s'
 *  Integrator: '<Root>/Integrator1'
 */
/* MATLAB Function 'MATLAB Function3': '<S3>:1' */
/* '<S3>:1:6' */
/* '<S3>:1:7' */
/* '<S3>:1:8' */
/* '<S3>:1:9' */
/* '<S3>:1:11' */
/* '<S3>:1:12' */
/* '<S3>:1:13' */
/* '<S3>:1:14' */
/* '<S3>:1:16' */
/* '<S3>:1:17' */
/* '<S3>:1:18' */
/* '<S3>:1:20' */
/* '<S3>:1:23' */
/* '<S3>:1:24' */
/* '<S3>:1:25' */
/* '<S3>:1:26' */
/* '<S3>:1:28' */
rtb_A[0] = (mymodel_P.b2_Value * mymodel_X.Integrator1_CSTATE[0] + 1.0) * -mymodel_P.r2_Value;
rtb_A_tmp = 1.0 / mymodel_P.b2_Value + mymodel_X.Integrator1_CSTATE[0];
rtb_A[4] = rtb_A_tmp * -mymodel_P.c4_Value;
rtb_A[8] = 0.0;
rtb_A[12] = rtb_A_tmp * -mymodel_P.a3_Value;
rtb_A[1] = -mymodel_P.c3_Value * mymodel_X.Integrator1_CSTATE[1];
rtb_A[5] = (1.0 - mymodel_P.b1_Value * mymodel_X.Integrator1_CSTATE[1]) * mymodel_P.r1_Value - (mymodel_P.c2_Value * mymodel_P.s_Value / mymodel_P.d1_Value + mymodel_P.c3_Value / mymodel_P.b2_Value);
rtb_A[9] = -mymodel_P.c2_Value * mymodel_X.Integrator1_CSTATE[1];
rtb_A[13] = -mymodel_P.a2_Value * mymodel_X.Integrator1_CSTATE[1];
rtb_A[2] = 0.0;
rtb_A[6] = (I_tmp * mymodel_P.ro_Value / (mymodel_P.alpha_Value + mymodel_X.Integrator1_CSTATE[1]) - I_tmp * mymodel_P.c1_Value) - mymodel_X.Integrator1_CSTATE[3];
rtb_A[10] = -mymodel_P.d1_Value;
rtb_A[14] = I_tmp * -mymodel_P.a1_Value + mymodel_X.Integrator1_CSTATE[1];
rtb_A[3] = 0.0;
rtb_A[7] = 0.0;
rtb_A[11] = 0.0;
rtb_A[15] = -mymodel_P.d2_Value;
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
    /* Constant: '<Root>/B1' */
    mymodel_B.VectorConcatenate[0] = mymodel_P.B1_Value;
    /* Constant: '<Root>/B2' */
    mymodel_B.VectorConcatenate[1] = mymodel_P.B2_Value;
    /* Constant: '<Root>/B3' */
    mymodel_B.VectorConcatenate[2] = mymodel_P.B3_Value;
    /* Constant: '<Root>/B4' */
    mymodel_B.VectorConcatenate[3] = mymodel_P.B4_Value;
    /* MATLAB Function: '<Root>/MATLAB Function1' incorporates:
 *  Constant: '<Root>/omega1'
 *  Constant: '<Root>/omega2'
 */
    /* MATLAB Function 'MATLAB Function1': '<S1>:1' */
    /* '<S1>:1:2' */
    mymodel_B.Q[1] = 0.0;
    mymodel_B.Q[5] = mymodel_P.omega1_Value;
    mymodel_B.Q[9] = 0.0;
    mymodel_B.Q[13] = 0.0;
    mymodel_B.Q[0] = 0.0;
    mymodel_B.Q[2] = 0.0;
    mymodel_B.Q[4] = 0.0;
    mymodel_B.Q[6] = 0.0;
    mymodel_B.Q[8] = 0.0;
    mymodel_B.Q[10] = 0.0;
    mymodel_B.Q[12] = 0.0;
    mymodel_B.Q[14] = 0.0;
    mymodel_B.Q[3] = 0.0;
    mymodel_B.Q[7] = 0.0;
    mymodel_B.Q[11] = 0.0;
    mymodel_B.Q[15] = mymodel_P.omega2_Value;
}
/* MATLAB Function: '<Root>/MATLAB Function4' incorporates:
 *  Constant: '<Root>/rc'
 *  Integrator: '<Root>/Integrator1'
 */
/* MATLAB Function 'MATLAB Function2': '<S2>:1' */
/* '<S2>:1:5' */
/* MATLAB Function 'MATLAB Function4': '<S4>:1' */
/* '<S4>:1:28' */
%<(SLibCGCallSubFcn("mymodel_ARE_diag", ["rtb_A", "mymodel_B.VectorConcatenate", "mymodel_B.Q", "mymodel_P.rc_Value", "rtb_P"], 0, 42, 0))>;
/* '<S4>:1:29' */
/* '<S4>:1:32' */
I_tmp = mymodel_B.VectorConcatenate[0] / mymodel_P.rc_Value;
rtb_A_tmp = mymodel_B.VectorConcatenate[1] / mymodel_P.rc_Value;
tmp_0 = mymodel_B.VectorConcatenate[2] / mymodel_P.rc_Value;
tmp_1 = mymodel_B.VectorConcatenate[3] / mymodel_P.rc_Value;
tmp = 0.0;
for (i = 0; i < 4; i++) {
    tmp += -(((rtb_P[(i << 2) + 1] * rtb_A_tmp + rtb_P[i << 2] * I_tmp) + rtb_P[(i << 2) + 2] * tmp_0) + rtb_P[(i << 2) + 3] * tmp_1) * mymodel_X.Integrator1_CSTATE[i];
}
/* '<S4>:1:37' */
/* '<S4>:1:40' */
for (i = 0; i < 4; i++) {
    mymodel_B.x_dot[i] = (((rtb_A[i + 4] * mymodel_X.Integrator1_CSTATE[1] + rtb_A[i] * mymodel_X.Integrator1_CSTATE[0]) + rtb_A[i + 8] * mymodel_X.Integrator1_CSTATE[2]) + rtb_A[i + 12] * mymodel_X.Integrator1_CSTATE[3]) + mymodel_B.VectorConcatenate[i] * tmp;
}
mymodel_B.u = tmp;
/* End of MATLAB Function: '<Root>/MATLAB Function4' */
if (%<(SLibCGIRIsSampleHit(1, 6))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS6B27)
    /* Scope: '<Root>/Scope' */
%<tlcOutputsFcnOfS6B27>\
%endif
}
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 42, fcnProtoType)>
%endfunction
